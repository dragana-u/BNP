1. Релационата база е дефинирана преку следните релации:

Vraboten(ID, ime, prezime, datum_r, datum_v, obrazovanie, plata)
Shalterski_rabotnik(ID*)

Klient(MBR_k, ime, prezime, adresa, datum)

Smetka(MBR_k_s*, broj, valuta, saldo)

Transakcija_shalter(ID, ID_v*, MBR_k*, MBR_k_s*, broj*, datum, suma, tip)
Bankomat(ID, lokacija, datum_p, zaliha)

Transakcija_bankomat(ID, MBR_k_s*, broj*, ID_b*, datum, suma).



Да се напишат соодветните DDL изрази за ентитетните множества „ТРАНСАКЦИЈА_ШАЛТЕР“, „ВРАБОТЕН“ и „ШАЛТЕРСКИ_РАБОТНИК“, како и за евентуалните релации кои произлегуваат од истите, доколку треба да бидат исполнети следните барања:


Доколку се избрише одреден вработен, информациите за извршените трансакции треба да останат зачувани во базата на податоци.

Датумот на извршување на трансакција не смее да биде во периодот од 30.12.2020 до 14.01.2021.

Типот на трансакцијата може да има една од двете вредности "uplata" или "isplata"

Датумот на раѓање на вработениот мора да биде пред неговиот датум на вработување


Забелешка: Табелите и атрибутите потребно е да ги креирате со ИСТИТЕ ИМИЊА и ИСТИОТ РЕДОСЛЕД како што е дадено во релациониот модел. За табелите кои веќе се креирани претпоставете дека примарните клучеви се од тип TEXT. За надворешните клучеви за кои не е наведено ограничување за референцијален интегритет се претпоставува каскадно бришење/промена. Конкретните вредности за датум дефинирајте ги како стринг (на пример "2021-01-20").

CREATE TABLE Vraboten(
ID TEXT PRIMARY KEY, 
ime VARCHAR(255), 
prezime VARCHAR(255), 
datum_r DATE, 
datum_v DATE, 
obrazovanie VARCHAR(255), 
plata NUMBER
CONSTRAINT proverka_datum CHECK (datum_r < datum_v)
);

CREATE TABLE Shalterski_rabotnik(
ID TEXT PRIMARY KEY REFERENCES Vraboten(ID) ON DELETE CASCADE ON UPDATE CASCADE 
);

CREATE TABLE Transakcija_shalter (
ID TEXT PRIMARY KEY,
ID_v TEXT REFERENCES Shalterski_rabotnik(ID) ON DELETE SET NULL ON UPDATE CASCADE,
MBR_k VARCHAR(255) REFERENCES Klient(MBR_k) ON DELETE CASCADE ON UPDATE CASCADE,
MBR_k_s VARCHAR(255),
broj NUMBER,
datum DATE CHECK(datum NOT BETWEEN '2020-12-30' AND '2021-01-14'),
suma NUMBER,
tip VARCHAR(255) CHECK (tip IN('uplata','isplata')),
CONSTRAINT fk_smetka FOREIGN KEY(MBR_k_s, broj) REFERENCES Smetka(MBR_k_s, broj) ON DELETE CASCADE ON UPDATE CASCADE
);


2.
Релационата база е дефинирана преку следните релации:

Lice(id, mbr, ime, prezime, data_r, vozrast, pol)

Med_lice(id*, staz)

Test(id*, shifra, tip, datum, rezultat, laboratorija)

Vakcina(shifra, ime, proizvoditel)

Vakcinacija(id_lice*, id_med_lice*, shifra_vakcina*)

Vakcinacija_datum(id_lice*, id_med_lice*, shifra_vakcina*, datum)

Да се напишат соодветните DDL изрази за ентитетните множества „ВАКЦИНАЦИЈА“ и „ТЕСТ“, како и за евентуалните релации кои произлегуваат од истите, доколку треба да бидат исполнети следните барања:


Mедицинските лица не може себеси да си даваат вакцина.

Лабораторијата „lab-abc“ прави само „seroloshki“ тестови.

Не сакаме да водиме информации за тестовите на лицата кои се избришани од базата на податоци.

CREATE TABLE Test(
id INT, 
shifra INT, 
tip VARCHAR(255), 
datum DATE, 
rezultat VARCHAR(255), 
laboratorija VARCHAR(255),
CONSTRAINT pk_test PRIMARY KEY(id,shifra),
CONSTRAINT fk_test FOREIGN KEY(id) REFERENCES Lice(id) ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT ck_tip_laboratorija CHECK (NOT (laboratorija = 'lab-abc') OR tip = 'seroloshki')
);

CREATE TABLE Vakcinacija(
id_lice INT, 
id_med_lice INT, 
shifra_vakcina INT,
CONSTRAINT pk_vakcinacija PRIMARY KEY(id_lice,id_med_lice,shifra_vakcina),
CONSTRAINT fk_vakcinacija1 FOREIGN KEY(id_lice) REFERENCES Lice(id) ON DELETE SET DEFAULT ON UPDATE CASCADE,
CONSTRAINT fk_vakcinacija2 FOREIGN KEY(id_med_lice) REFERENCES Med_lice(id) ON DELETE SET DEFAULT ON UPDATE CASCADE,
CONSTRAINT fk_vakcinacija FOREIGN KEY(shifra_vakcina) REFERENCES Vakcina(shifra) ON DELETE SET DEFAULT ON UPDATE CASCADE,
CONSTRAINT proverka CHECK(id_lice!=id_med_lice)
);

CREATE TABLE Vakcinacija_datum(
id_lice INT,
id_med_lice INT,
shifra_vakcina INT,
datum DATE,
CONSTRAINT fk_datum FOREIGN KEY(id_lice,id_med_lice,shifra_vakcina) 
REFERENCES Vakcinacija(id_lice,id_med_lice,shifra_vakcina) ON DELETE SET NULL ON UPDATE CASCADE,
CONSTRAINT pk_datum PRIMARY KEY(id_lice,id_med_lice,shifra_vakcina,datum)
);

3. 
Релационата база е дефинирана преку следните релации: 


Muzicar(id, ime, prezime, datum_ragjanje)

Muzicar_instrument(id_muzicar*, instrument)

Bend(id, ime, godina_osnovanje)

Bend_zanr(id_bend*, zanr)

Nastan(id, cena, kapacitet)

Koncert(id*, datum, vreme)

Festival(id*, ime)

Festival_odrzuvanje(id*, datum_od, datum_do)

Muzicar_bend(id_muzicar*, id_bend*, datum_napustanje)

Festival_bend(id_festival*, datum_od*, id_bend*)

Koncert_muzicar_bend(id_koncert*, id_muzicar*, id_bend*)

Да се напишат соодветните DDL изрази за ентитетните множества „БЕНД“ и „ФЕСТИВАЛ_БЕНД“, како и за евентуалните релации кои произлегуваат од истите, доколку треба да бидат исполнети следните барања:


Бендот со шифра (id или id_bend) 5 не може да настапува на фестивалот со шифра (id_festival) 2.

Сакаме да водиме евиденција за настапите на фестивали за бендови што се бришат од системот.

Се чуваат податоци само за бендови кои се основани во 1970 или подоцна.

Забелешка: Табелите и атрибутите потребно е да ги креирате со ИСТИТЕ ИМИЊА и ИСТИОТ РЕДОСЛЕД како што е дадено во релациониот модел. За табелите кои веќе се креирани претпоставете дека примарните клучеви се од тип TEXT. За надворешните клучеви за кои не е наведено ограничување за референцијален интегритет се претпоставува каскадна промена/бришење. Конкретните вредности за датум дефинирајте ги како стринг (на пример "2022-06-14").

CREATE TABLE Bend (
    id TEXT PRIMARY KEY,
    ime VARCHAR(255),
    godina_osnovanje NUMBER,
    CONSTRAINT prov CHECK(godina_osnovanje >= 1970)
);


CREATE TABLE Bend_zanr(
id_bend TEXT, 
zanr TEXT,
CONSTRAINT pk_zanr PRIMARY KEY(id_bend,zanr),
CONSTRAINT fk_zanr FOREIGN KEY(id_bend) REFERENCES Bend(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Festival_bend(
id_festival TEXT, 
datum_od TEXT, 
id_bend TEXT,
CONSTRAINT pk_festival_bend PRIMARY KEY(id_festival,datum_od,id_bend),
CONSTRAINT fk_1 FOREIGN KEY(id_festival,datum_od) REFERENCES Festival_odrzuvanje(id, datum_od)
ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT fk_2 FOREIGN KEY(id_bend) REFERENCES Bend(id)
ON DELETE SET DEFAULT ON UPDATE CASCADE,
CONSTRAINT prov_bend CHECK (NOT (id_bend = '5') OR id_festival != '2')
);

4.
	
Релационата база е дефинирана преку следните релации: 


Korisnik(kor_ime, ime, prezime, pol, data_rag, data_reg)

Korisnik_email(kor_ime*, email)

Mesto(id, ime)

Poseta(id, kor_ime*, id_mesto*, datum)

Grad(id_mesto*, drzava)

Objekt(id_mesto*, adresa, geo_shirina, geo_dolzina, id_grad*)

Sosedi(grad1*, grad2*, rastojanie)


Да се напишат соодветните DDL изрази за ентитетните множества „КОРИСНИК“ и „ПОСЕТА“, како и за евентуалните релации кои произлегуваат од истите, доколку треба да бидат исполнети следните барања:


Сакаме да водиме евиденција за посетите на местата од корисниците кои се избришани од системот.

Е-маил адресата завршува на „.com“ и истата треба да содржи најмалку 10 карактери.

Датумот на посета на место не смее да биде пo датумот на внесување на записот во базата.

CREATE TABLE Korisnik(
kor_ime TEXT PRIMARY KEY, 
ime TEXT, 
prezime TEXT, 
pol TEXT, 
data_rag DATE, 
data_reg DATE
);

CREATE TABLE Korisnik_email(
kor_ime TEXT, 
email TEXT,
CONSTRAINT pk_k_e PRIMARY KEY(kor_ime,email),
CONSTRAINT fk_k_e  FOREIGN KEY(kor_ime) REFERENCES Korisnik(kor_ime) ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT prov_e CHECK (email LIKE '%.com' AND LENGTH(email) >= 10)
);

CREATE TABLE Poseta(
id TEXT, 
kor_ime TEXT, 
id_mesto TEXT, 
datum DATE,
CONSTRAINT pk_p PRIMARY KEY(id),
CONSTRAINT fk_p1 FOREIGN KEY(kor_ime) REFERENCES Korisnik(kor_ime) ON DELETE SET NULL ON UPDATE CASCADE,
CONSTRAINT fk_p2 FOREIGN KEY(id_mesto) REFERENCES Mesto(id) ON DELETE CASCADE ON UPDATE CASCADE
CONSTRAINT chk_datum check ( datum < '2024-12-20' )
);

5.

Релационата база е дефинирана преку следните релации:

Korisnik(k_ime, ime, prezime, tip, pretplata, datum_reg, tel_broj, email)

Premium_korisnik(k_ime*, datum, procent_popust)

Profil(k_ime*, ime, datum)

Video_zapis(naslov, jazik, vremetraenje, datum_d, datum_p)

Video_zapis_zanr(naslov*, zanr)

Lista_zelbi(naslov*, k_ime*, ime*)


Preporaka(ID, k_ime_od*, k_ime_na*, naslov*, datum, komentar, ocena)

Да се напишат соодветните DDL изрази за ентитетните множества „ВИДЕО ЗАПИС“ и „ПРЕПОРАКА“, како и за евентуалните релации кои произлегуваат од истите, доколку треба да бидат исполнети следните барања:


Сакаме да водиме евиденција за препорачаните видео записи од корисници кои се избришани од системот.

Корисникот не може себе да си препорача видео запис.

Датумот на препорака не може да биде во иднина (т.е. не смее да биде по тековниот датум).

Забелешка: Табелите и атрибутите потребно е да ги креирате со ИСТИТЕ ИМИЊА и ИСТИОТ РЕДОСЛЕД како што е дадено во релациониот модел. За табелите кои веќе се креирани претпоставете дека примарните клучеви се од тип TEXT. За надворешните клучеви за кои не е наведено ограничување за референцијален интегритет се претпоставува каскадна промена/бришење. Конкретните вредности за датум дефинирајте ги како стринг (на пример "2022-01-17"). За пристап до тековниот датум може да користите CURRENT_DATE.

create table Video_zapis(
naslov TEXT PRIMARY KEY, 
jazik TEXT, 
vremetraenje NUMBER, 
datum_d DATE, 
datum_p DATE
);

create table Video_zapis_zanr(
naslov TEXT REFERENCES Video_zapis(naslov) ON DELETE CASCADE ON UPDATE CASCADE, 
zanr TEXT,
CONSTRAINT pk_v_z PRIMARY KEY(naslov,zanr)
);

create table Preporaka(
ID TEXT PRIMARY KEY, 
k_ime_od TEXT, 
k_ime_na TEXT, 
naslov TEXT REFERENCES Video_zapis(naslov) ON DELETE CASCADE ON UPDATE CASCADE, 
datum DATE, 
komentar TEXT, 
ocena NUMBER,
CONSTRAINT fk_p FOREIGN KEY(k_ime_od) REFERENCES Korisnik(k_ime)ON DELETE SET NULL ON UPDATE CASCADE,
CONSTRAINT fk_p2 FOREIGN KEY(k_ime_na) REFERENCES Korisnik(k_ime)ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT pr CHECK (k_ime_od != k_ime_na),
CONSTRAINT dat_pr CHECK (datum <= CURRENT_DATE)
);

6.
	
Релационата база е дефинирана преку следните релации:

Korisnik(k_ime, ime, prezime, tip, pretplata, datum_reg, tel_broj, email)

Premium_korisnik(k_ime*, datum, procent_popust)

Profil(k_ime*, ime, datum)

Video_zapis(naslov, jazik, vremetraenje, datum_d, datum_p)

Video_zapis_zanr(naslov*, zanr)

Lista_zelbi(ID, naslov*, k_ime*, ime*)


Preporaka(ID, k_ime_od*, k_ime_na*, naslov*, datum, komentar, ocena)

Да се напишат соодветните DDL изрази за ентитетните множества „ЛИСТА_ЖЕЛБИ“, „КОРИСНИК“ и „ПРЕМИУМ_КОРИСНИК“, како и за евентуалните релации кои произлегуваат од истите, доколку треба да бидат исполнети следните барања:


Доколку не се внесе процентот на попуст за премиум корисник, тогаш сакаме да се додели предодредена вредност 10.

Сакаме да водиме евиденција во листите на желби за видео записите кои се избришани од системот.

Корисниците регистрирани пред 01.01.2015 не може да бидат претплатени на „pretplata 3“.

Забелешка: Табелите и атрибутите потребно е да ги креирате со ИСТИТЕ ИМИЊА и ИСТИОТ РЕДОСЛЕД како што е дадено во релациониот модел. За табелите кои веќе се креирани претпоставете дека примарните клучеви се од тип TEXT. За надворешните клучеви за кои не е наведено ограничување за референцијален интегритет се претпоставува каскадна промена/бришење. Конкретните вредности за датум дефинирајте ги како стринг (на пример "2022-01-17"). За пристап до тековниот датум може да користите CURRENT_DATE.

CREATE TABLE Korisnik(
k_ime TEXT PRIMARY KEY, 
ime TEXT, 
prezime TEXT, 
tip TEXT, 
pretplata TEXT, 
datum_reg DATE, 
tel_broj NUMBER, 
email TEXT,
CONSTRAINT pr_dat CHECK(NOT (datum_reg < '2015-01-01') OR pretplata!='pretplata 3')
);

CREATE TABLE Premium_korisnik(
k_ime PRIMARY KEY REFERENCES Korisnik(k_ime) ON DELETE CASCADE ON UPDATE CASCADE, 
datum DATE, 
procent_popust NUMBER DEFAULT 10
);

CREATE TABLE Lista_zelbi(
ID TEXT PRIMARY KEY, 
naslov TEXT REFERENCES Video_zapis(naslov) ON DELETE SET NULL ON UPDATE CASCADE, 
k_ime TEXT, 
ime TEXT,
CONSTRAINT fk_l_z FOREIGN KEY(k_ime,ime) REFERENCES Profil(k_ime,ime) ON DELETE CASCADE ON UPDATE CASCADE
);

7.
	
Релационата база е дефинирана преку следните релации:

Korisnik(k_ime, ime, prezime, tip, pretplata, datum_reg, tel_broj, email)

Premium_korisnik(k_ime*, datum, procent_popust)

Profil(k_ime*, ime, datum)

Video_zapis(naslov, jazik, vremetraenje, datum_d, datum_p)

Video_zapis_zanr(naslov*, zanr)

Lista_zelbi(naslov*, k_ime*, ime*)


Preporaka(ID, k_ime_od*, k_ime_na*, naslov*, datum, komentar, ocena)


Да се напишат DDL изразите за сите ентитетни множества кои се дефинирани во релациониот модел. Дополнително, потребно е да бидат исполнети следните барања:
Доколку јазикот на видео записот не е наведен, треба да се пополни со предефинирана вредност 'English'
Доколку процентот на попуст на премиум корисниците не е наведен, треба да се пополни со предефинирана вредност од 20 проценти
Полето за чување на телефонскиот број на корисникот потребно е да биде со максимална големина од 12 карактери
Коментар при препорака мора да биде внесен при што не смее да надмине големина од 250 карактери
Датумот на достапност на видео запис не може да биде пред датумот на премиера (може да бидат исти)
Оцената на препораката мора да биде од 1 до 5
Доколку некој видео запис се избрише од системот, препораките за тој запис треба да останат зачувани во базата на податоци со предефинирана вредност за наслов на записот 'Deleted'
При промена или бришење на корисникот, промената треба да се проследи и до табелата со премиум корисници.
Валидни препораки кои се внесуваат во базата мора да се по започнување на системот за стриминг на 7ми декември 2022 година
Регистрацијата на корисници во системот е дозволена од почеток на 2023 година до крајот на 2024 година

CREATE TABLE Korisnik(
k_ime TEXT PRIMARY KEY, 
ime TEXT, 
prezime TEXT, 
tip TEXT, 
pretplata TEXT, 
datum_reg DATE, 
tel_broj VARCHAR(12), 
email TEXT,
CONSTRAINT dat CHECK(datum_reg BETWEEN '2023-01-01' AND '2024-12-31')
);

CREATE TABLE Premium_korisnik(
k_ime TEXT PRIMARY KEY REFERENCES Korisnik(k_ime) ON DELETE CASCADE ON UPDATE CASCADE, 
datum DATE, 
procent_popust NUMBER DEFAULT 20
);

CREATE TABLE Profil(
k_ime TEXT REFERENCES Korisnik(k_ime) ON DELETE CASCADE ON UPDATE CASCADE, 
ime TEXT, 
datum DATE,
CONSTRAINT pk_p PRIMARY KEY (k_ime,ime)
);

CREATE TABLE Video_zapis(
naslov TEXT PRIMARY KEY, 
jazik TEXT DEFAULT 'English', 
vremetraenje NUMBER, 
datum_d DATE, 
datum_p DATE,
CONSTRAINT dat_ch CHECK (datum_p <= datum_d)
);

CREATE TABLE Video_zapis_zanr(
naslov TEXT REFERENCES Video_zapis(naslov) ON DELETE CASCADE ON UPDATE CASCADE, 
zanr TEXT,
CONSTRAINT pk_v PRIMARY KEY(naslov,zanr)
);

CREATE TABLE Lista_zelbi(
naslov TEXT REFERENCES Video_zapis(naslov) ON DELETE CASCADE ON UPDATE CASCADE, 
k_ime TEXT, 
ime TEXT,
CONSTRAINT pk_l_z PRIMARY KEY(naslov,k_ime,ime),
CONSTRAINT fk_l_z FOREIGN KEY (k_ime,ime) REFERENCES Profil(k_ime,ime) 
ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Preporaka (
    ID TEXT PRIMARY KEY, 
    k_ime_od TEXT, 
    k_ime_na TEXT, 
    naslov TEXT REFERENCES Video_zapis(naslov) ON DELETE SET DEFAULT ON UPDATE CASCADE DEFAULT 'Deleted', 
    datum DATE, 
    komentar VARCHAR(250) NOT NULL, 
    ocena NUMBER,
    CONSTRAINT fk_p FOREIGN KEY (k_ime_od) REFERENCES Korisnik(k_ime) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_p2 FOREIGN KEY (k_ime_na) REFERENCES Korisnik(k_ime) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT ck_oc CHECK (ocena > 0 AND ocena < 6),
    CONSTRAINT ck_dat CHECK (datum > '2022-12-07')
);

8.
Релационата база е дефинирана преку следните релации:

Vraboten(ID, ime, prezime, datum_r, datum_v, obrazovanie, plata)
Shalterski_rabotnik(ID*)

Klient(MBR_k, ime, prezime, adresa, datum)

Smetka(MBR_k*, broj, valuta, saldo)

Transakcija_shalter(ID, ID_v*, MBR_k*, MBR_k_s*, broj*, datum, suma, tip)
Bankomat(ID, lokacija, datum, zaliha)

Transakcija_bankomat(ID, MBR_k_s*, broj*, ID_b*, datum, suma).



Да се напишат DDL изразите за сите ентитетни множества кои се дефинирани во релациониот модел. Дополнително, потребно е да бидат исполнети следните барања:

Доколку се избрише одреден вработен, информациите за извршените трансакции треба да останат зачувани во базата на податоци.

Информацијата за ID на банкомат која се чува во трансакциите спроведени на банкомат треба да има предефинирана вредност од -1.

Информацијата за образованието на вработениот мора да биде пополнето и да биде некоја од вредностите 'PhD', 'MSc', 'High School', 'BSc'

Датумот на извршување на трансакција на банкомат не смее да биде во периодот од 30.12.2020 до 14.01.2021.

Типот на трансакцијата може да има една од двете вредности 'uplata' или 'isplata'

Вредноста на залихата во банкоматите не смее да има вредност помала од 0.

Датумот на раѓање на вработениот мора да биде пред неговиот датум на вработување

Локациите на банкоматите мора да имаат различни (уникатни) вредности

Адресата на клинетите треба да има предефинирана вреднот 'Ne e navedena' 

Доколку се затвори одреден банкомат и истиот се избрише од базата, информациите за извршените трансакции за дадениот банкомат треба да останат зачувани во базата на податоци со предефинирана вредност.

CREATE TABLE Vraboten(
  ID INT, 
  ime VARCHAR(255), 
  prezime VARCHAR(255), 
  datum_r DATE, 
  datum_v DATE, 
  obrazovanie VARCHAR(255), 
  plata NUMBER,
  CONSTRAINT pk_vraboten PRIMARY KEY (ID),
  CONSTRAINT obr_proverka CHECK(obrazovanie in ('PhD', 'MSc', 'High School','BSc')),
  CONSTRAINT datum_proverka CHECK(datum_v > datum_r)
);

CREATE TABLE Shalterski_rabotnik(
ID INT PRIMARY KEY REFERENCES Vraboten(ID)
ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Klient(
MBR_k INT PRIMARY KEY, 
ime TEXT, 
prezime TEXT, 
adresa TEXT DEFAULT "Ne e navedena", 
datum DATE
);

CREATE TABLE Smetka(
MBR_k INT REFERENCES Klient(MBR_k) ON DELETE CASCADE ON UPDATE CASCADE, 
broj INT, 
valuta TEXT, 
saldo INT,
CONSTRAINT pk_smetka PRIMARY KEY(MBR_k,broj)
);

CREATE TABLE Transakcija_shalter(
ID INT PRIMARY KEY, 
ID_v INT REFERENCES Shalterski_rabotnik(ID) ON DELETE SET NULL ON UPDATE CASCADE, 
MBR_k INT REFERENCES Klient(MBR_k) ON DELETE CASCADE ON UPDATE CASCADE, 
MBR_k_s INT,  
broj INT, 
datum DATE, 
suma INT, 
tip TEXT,
CONSTRAINT fk_ts FOREIGN KEY(MBR_k_s,broj) REFERENCES Smetka(MBR_k,broj)
ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT pr CHECK (tip IN ("uplata", "isplata"))
);

CREATE TABLE Bankomat(
ID INT PRIMARY KEY, 
lokacija TEXT UNIQUE, 
datum DATE, 
zaliha INT,
CONSTRAINT p_z CHECK (zaliha >= 0 )
);

CREATE TABLE Transakcija_bankomat (
    ID INT PRIMARY KEY, 
    MBR_k_s INT, 
    broj INT, 
    ID_b INT REFERENCES Bankomat(ID) ON DELETE SET DEFAULT ON UPDATE CASCADE DEFAULT -1, 
    datum DATE, 
    suma INT,
    CONSTRAINT fk_b1 FOREIGN KEY (MBR_k_s, broj) REFERENCES Smetka (MBR_k, broj)
    ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT datum_transakcija CHECK(datum NOT BETWEEN '2020-12-30' AND '2021-01-14')
);

